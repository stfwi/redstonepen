// @file build.gradle
plugins {
  id 'java-library'
  id 'maven-publish'
  id 'net.neoforged.moddev' version '2.0.76'
  id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
  distributionType = Wrapper.DistributionType.BIN
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
tasks.named('wrapper', Wrapper).configure { distributionType = Wrapper.DistributionType.BIN }

//-----------------------------------------------------------------------------
version = "${mod_version}"
group = "${mod_group_id}"
base { archivesName = "${mod_id}-${minecraft_version}-neoforge" }

repositories {
  mavenLocal()
  // flatDir { dir 'libs' } // Mod jar dependencies in ./libs
}

neoForge {
  version = project.neo_version

  parchment {
    mappingsVersion = project.parchment_mappings_version
    minecraftVersion = project.parchment_minecraft_version
  }

  // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

  runs {
    client {
      client()
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    server {
      server()
      programArgument '--nogui'
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }
    data {
      clientData()
      programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
    configureEach {
      systemProperty 'forge.logging.markers', 'REGISTRIES'   // "REGISTRIES", "REGISTRYDUMP", "SCAN"
      logLevel = org.slf4j.event.Level.INFO // DEBUG or INFO, WARN, ERROR
    }
  }

  mods {
    "${mod_id}" {
      sourceSet(sourceSets.main)
    }
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations { runtimeClasspath.extendsFrom localRuntime }
dependencies {}

tasks.withType(ProcessResources).configureEach {
  outputs.upToDateWhen { false }
  doLast {
    file("build/generated/sources/modMetadata/.gitversion-${mod_id}").text = 'git log "-1" "--format=%h"'.execute().in.text.trim()
  }
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
  var replaceProperties = [
    minecraft_version      : minecraft_version,
    minecraft_version_range: minecraft_version_range,
    neo_version            : neo_version,
    neo_version_range      : neo_version_range,
    loader_version_range   : loader_version_range,
    mod_id                 : mod_id,
    mod_name               : mod_name,
    mod_license            : mod_license,
    mod_version            : mod_version,
    mod_authors            : mod_authors,
    mod_description        : mod_description,
    pack_format_version    : pack_format_version,
    meta_issues            : meta_issues,
    meta_updateurl         : meta_updateurl,
    meta_download          : meta_download
  ]
  inputs.properties replaceProperties
  expand replaceProperties
  from "src/main/templates"
  into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}
