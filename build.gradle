// @file build.gradle
plugins {
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
//-----------------------------------------------------------------------------
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

//-----------------------------------------------------------------------------
version = "${mod_version}"
group = "${mod_group_id}"
base { archivesName = "${mod_id}-${minecraft_version}-forge" }

repositories {
  mavenLocal()
  // flatDir { dir 'libs' } // Mod jar dependencies in ./libs
}

minecraft {
  mappings channel: mapping_channel, version: mapping_version
  copyIdeResources = true
  runs {
    configureEach {
      workingDirectory project.file('run')
      property 'forge.logging.markers', ''
      property 'forge.logging.console.level', 'debug'
    }
    client {
      property 'forge.enabledGameTestNamespaces', mod_id
    }
    server {
      property 'forge.enabledGameTestNamespaces', mod_id
      args '--nogui'
    }
    gameTestServer {
      property 'forge.enabledGameTestNamespaces', mod_id
    }
    data {
      workingDirectory project.file('run-data')
      args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
    }
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' } // Include resources generated by data generators.

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
}

tasks.named('processResources', ProcessResources).configure {
  var replaceProperties = [
    minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
    forge_version: forge_version, forge_version_range: forge_version_range,
    loader_version_range: loader_version_range,
    mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
    mod_authors: mod_authors, mod_description: mod_description,
    meta_issues:meta_issues, meta_updateurl:meta_updateurl, meta_download:meta_download,
    pack_format_version: pack_format_version,
  ]
  inputs.properties replaceProperties
  filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
    expand replaceProperties + [project: project]
  }

  outputs.upToDateWhen { false }
  doLast {
    file("${sourceSets.main.output.resourcesDir}/.gitversion-${mod_id}").text = 'git log "-1" "--format=%h"'.execute().in.text.trim()
  }
}

tasks.named('jar', Jar).configure {
  manifest {
    attributes([
      'Specification-Title'     : mod_id,
      'Specification-Vendor'    : mod_authors,
      'Specification-Version'   : '1', // We are version 1 of ourselves
      'Implementation-Title'    : project.name,
      'Implementation-Version'  : project.jar.archiveVersion,
      'Implementation-Vendor'   : mod_authors
    ])
  }
  finalizedBy 'reobfJar'
}

publishing {
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

eclipse {
  synchronizationTasks 'genEclipseRuns'
}

sourceSets.each {
  def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
  it.output.resourcesDir = dir
  it.java.destinationDirectory = dir
}
