// @file build.gradle
plugins {
  id 'java-library'
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.145'
}
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
tasks.named('wrapper', Wrapper).configure { distributionType = Wrapper.DistributionType.BIN }

//-----------------------------------------------------------------------------
version = "${version_mod}"
group = "${meta_modgroup}"
base { archivesName = "${meta_modid}-${version_minecraft}-neoforge" }

repositories {
  mavenLocal()
  // flatDir { dir 'libs' } // Mod jar dependencies in ./libs
}

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
  configureEach {
    systemProperty 'forge.logging.markers', 'REGISTRIES' // "REGISTRYDUMP", "REGISTRIES", "SCAN"
    systemProperty 'forge.logging.console.level', 'debug'
    modSource project.sourceSets.main
  }
  client {
    systemProperty 'forge.enabledGameTestNamespaces', project.meta_modid
  }
  server {
    systemProperty 'forge.enabledGameTestNamespaces', project.meta_modid
    programArgument '--nogui'
  }
  gameTestServer {
    systemProperty 'forge.enabledGameTestNamespaces', project.meta_modid
  }
  data {
    programArguments.addAll '--mod', project.meta_modid, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
configurations { runtimeClasspath.extendsFrom localRuntime }

dependencies {
  implementation "net.neoforged:neoforge:${version_neoforge}"
}

tasks.withType(ProcessResources).configureEach {
  var property_replacements = [
    meta_modid:meta_modid, meta_modname:meta_modname, meta_author:meta_author, meta_license:meta_license,
    meta_description:meta_description, meta_issues:meta_issues, meta_updateurl:meta_updateurl,
    meta_download:meta_download,
    version_mod: version_mod,
    version_minecraft:version_minecraft,
    version_neoforge:version_neoforge,
    version_range_loader:version_range_loader,
    version_range_neoforge:version_range_neoforge,
    version_range_minecraft: version_range_minecraft,
    version_pack_format: version_pack_format,
  ]
  inputs.properties property_replacements
  filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
    expand property_replacements + [project: project]
  }
  outputs.upToDateWhen { false }
  doLast {
    file("${sourceSets.main.output.resourcesDir}/.gitversion-${meta_modid}").text = 'git log "-1" "--format=%h"'.execute().in.text.trim()
  }
}

publishing {
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}
